model Lodge {
    id        String   @id
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    name String

    members Member[]
    roles   Role[]
}

model User {
    id        String   @id
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    username String
    password String

    memberships Member[]
    messages    Message[]
}

model Member {
    userId    String
    lodgeId   String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    user  User         @relation(fields: [userId], references: [id])
    lodge Lodge        @relation(fields: [lodgeId], references: [id])
    roles MemberRole[]

    @@id([userId, lodgeId])
}

model MemberRole {
    userId    String
    lodgeId   String
    roleId    String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    member Member? @relation(fields: [userId, lodgeId], references: [userId, lodgeId])
    role   Role    @relation(fields: [roleId], references: [id])

    @@id([userId, lodgeId, roleId])
}

model Role {
    id        String   @id
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    name        String
    permissions String

    lodge   Lodge        @relation(fields: [lodgeId], references: [id])
    lodgeId String
    members MemberRole[]

    overrides PermissionOverride[]
}

model PermissionOverride {
    channelId String
    roleId    String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    allow String
    deny  String

    channel Channel @relation(fields: [channelId], references: [id])
    role    Role    @relation(fields: [roleId], references: [id])

    @@id([channelId, roleId])
}

model Channel {
    id        String   @id
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    name     String
    position Int
    pinned   Boolean

    topicComponent TopicComponent?
    textComponent  TextComponent?
    permissions    PermissionOverride[]

    children Channel[] @relation(name: "channel")
    parent   Channel?  @relation(name: "channel", fields: [parentId], references: [id])
    parentId String?
}

model TopicComponent {
    id        String   @id
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    content String

    channel Channel @relation(fields: [id], references: [id])
}

model TextComponent {
    id        String   @id
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    channel  Channel   @relation(fields: [id], references: [id])
    messages Message[]
}

model Message {
    id        String   @id
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    content String

    textComponent   TextComponent @relation(fields: [textComponentId], references: [id])
    textComponentId String
    author          User?         @relation(fields: [authorId], references: [id])
    authorId        String?
}
