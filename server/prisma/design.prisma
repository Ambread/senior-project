datasource db {
    provider = "sqlite"
    url      = "file:../data/db.sqlite"
}

generator client {
    provider = "cargo prisma"
    output   = "../src/prisma.rs"
}

model Lodge {
    id        String   @id @default(uuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    name String

    members Member[]
    roles   Role[]
}

model User {
    id        String   @id @default(uuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    username String
    password String

    memberships Member[]
    messages    Message[]
}

model Member {
    id        String   @id @default(uuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    user    User   @relation(fields: [userId], references: [id])
    userId  String
    lodge   Lodge  @relation(fields: [lodgeId], references: [id])
    lodgeId String

    roles Role[]
}

model Role {
    id        String   @id @default(uuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    name        String
    permissions String

    lodge   Lodge    @relation(fields: [lodgeId], references: [id])
    lodgeId String
    members Member[]

    overrides PermissionOverride[]
}

model PermissionOverride {
    channelId String
    roleId    String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    allow String
    deny  String

    channel Channel @relation(fields: [channelId], references: [id])
    role    Role    @relation(fields: [roleId], references: [id])

    @@id([channelId, roleId])
}

model Channel {
    id        String   @id @default(uuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    name     String
    position Int
    pinned   Boolean

    compoundComponent CompoundComponent?
    topicComponent    TopicComponent?
    textComponent     TextComponent?

    parent      CompoundComponent?   @relation(name: "children", fields: [parentId], references: [id])
    parentId    String?
    permissions PermissionOverride[]
}

model CompoundComponent {
    id        String   @id
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    channel  Channel   @relation(fields: [id], references: [id])
    children Channel[] @relation(name: "children")
}

model TopicComponent {
    id        String   @id
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    content String

    channel Channel @relation(fields: [id], references: [id])
}

model TextComponent {
    id        String   @id
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    channel  Channel   @relation(fields: [id], references: [id])
    messages Message[]
}

model Message {
    id        String   @id @default(uuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    content String

    textComponent   TextComponent @relation(fields: [textComponentId], references: [id])
    textComponentId String
    author          User?         @relation(fields: [authorId], references: [id])
    authorId        String?
}
